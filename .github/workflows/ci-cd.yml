name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # Job de testes e validações
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: 📁 Checkout repository
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: 📥 Install dependencies
        run: npm ci
        
      - name: 🔍 Run ESLint
        run: npm run lint
        
      - name: 🧪 Run tests
        run: npm run test:ci
        
      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          
      - name: 📝 Type check
        run: npm run type-check

  # Job de build
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: 📁 Checkout repository
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: 📥 Install dependencies
        run: npm ci
        
      - name: 🏗️ Build application
        run: npm run build
        
      - name: 💾 Cache build artifacts
        uses: actions/cache@v3
        with:
          path: |
            .next/cache
            node_modules/.cache
          key: ${{ runner.os }}-build-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ hashFiles('**/package-lock.json') }}-
            ${{ runner.os }}-build-

  # Job de deploy para Preview (PRs)
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 📁 Checkout repository
        uses: actions/checkout@v4
        
      - name: 📦 Install Vercel CLI
        run: npm install --global vercel@latest
        
      - name: 🔗 Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
        
      - name: 🏗️ Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
        
      - name: 🚀 Deploy Project Artifacts to Vercel
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "preview-url=$url" >> $GITHUB_OUTPUT
          
      - name: 💬 Comment PR with preview URL
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '🚀 Preview deployment ready!\n\n✨ **Preview URL:** ${{ steps.deploy.outputs.preview-url }}\n\n🧪 **Test Coverage:** Check the latest coverage report in the CI logs.'
            })

  # Job de deploy para Production (main branch)
  deploy-production:
    name: Deploy Production
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: 📁 Checkout repository
        uses: actions/checkout@v4
        
      - name: 📦 Install Vercel CLI
        run: npm install --global vercel@latest
        
      - name: 🔗 Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        
      - name: 🏗️ Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        
      - name: 🚀 Deploy Project Artifacts to Vercel
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "production-url=$url" >> $GITHUB_OUTPUT
          
      - name: 📢 Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            🚀 **Deployment successful!**
            
            **Production URL:** ${{ steps.deploy.outputs.production-url }}
            
            **Changes in this release:**
            ${{ github.event.head_commit.message }}
            
            **Commit:** ${{ github.sha }}
          draft: false
          prerelease: false

  # Job de notificação (opcional)
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-preview]
    if: always()
    
    steps:
      - name: 📧 Notify success
        if: needs.deploy-production.result == 'success' || needs.deploy-preview.result == 'success'
        run: |
          echo "✅ Deployment completed successfully!"
          
      - name: 📧 Notify failure
        if: needs.deploy-production.result == 'failure' || needs.deploy-preview.result == 'failure'
        run: |
          echo "❌ Deployment failed!"
          exit 1
